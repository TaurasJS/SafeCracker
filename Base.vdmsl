module Base
imports from IO operations println
exports all
definitions 

--All changes done by me, (student), will have a comment indicating the change.
types 

Id = token;

-- added Ids (student)
Ids = seq of Id
inv ids == len ids <= 2; -- added this line (student)

TypeMap = map Id to ScalarType;

ValueMap = map Id to ScalarValue;

ScalarType = <IntTp> | <BoolTp> | <StrTp>; -- added StrTp (student)

ScalarValue = int | bool | string; -- added string (student)

Program :: vars : TypeMap
		   body : Stmts;

string = seq of char; -- added string (student)

Stmts = seq of Stmt;

Stmt = Assign | If | While;

Assign :: lhs : Ids --changed Id to Ids (student)
		  rhs : Exprs; -- changed Expr to Exprs (student)

If :: test : Expr
	  th   : Stmts
	  el   : Stmts
  	  --inv mk_If(test, -, -) == (is_RelExpr(test))
	  -- if b then P
	  -- if b then P else Q
  	  ;

While :: test : Expr
		 body : Stmts
		 --inv mk_While(test, -) == (is_RelExpr(test))
		 ;

Expr = ArithExpr | RelExpr | TextExpr | Id | ScalarValue; -- added TextExpr (student)

-- added Exprs (student)
Exprs = seq of Expr
inv exprs == len exprs <=2; 

ArithExpr :: opd1 	: Expr
			 oprator: <PLUS> | <MINUS>
			 opd2	: Expr
			 --inv mk_ArithExpr(opd1, -, opd2) == (is_ArithExpr(opd1) and is_ArithExpr(opd2))
			 ;
				
RelExpr :: opd1    : Expr
		   operator: <EQUALS> | <NOTEQUALS> | <GT> | <IN> -- added IN here but it will be used for string operations (student)
		   opd2	   : Expr
  		   --inv mk_RelExpr(opd1, -, opd2) == (is_RelExpr(opd1) and is_RelExpr(opd2))
  		   ;

-- Created TextExpr (student)
TextExpr :: opd1 : Expr
			operator: <ADD>
			opd2 : Expr
			;

-- meaning, is it automatically assigned as seq of char?

---- extensions

Block :: vars : TypeMap
		 body : Stmts;

values 
	i : Id = mk_token("i");
	j : Id = mk_token("j");
	a : Id = mk_token("a");
	b : Id = mk_token("b");

	-- program end
	PROG0: Program = mk_Program({|->}, []);
	-- program int i; bool b end
	PROG1: Program = mk_Program({ i |-> <IntTp>, b |-> <BoolTp> }, []);
	-- program
	--		int i, j;
	--		bool b;
	--		j := b;
	--		i := b + 1;
	--		if 42 then 
	--			i := true
	--		else
	--			b := 7
	--		fi
	--
	-- loads of type errors
	/*PROG2: Program = mk_Program({ i |-> <IntTp>, j |-> <IntTp>, b |-> <BoolTp> }, 
								[
									mk_Assign(j, b),
									mk_Assign(i, mk_ArithExpr(b, <PLUS>, 1)),
									mk_If(42, 
										  [ mk_Assign(i, true) ],
										  [ mk_Assign(b, 7) ])
								]);


	PROG3: Program = mk_Program({ i |-> <IntTp>, j |-> <IntTp>, b |-> <BoolTp> }, 
								[
									mk_Assign(j, 0),
									mk_Assign(i, mk_ArithExpr(j, <PLUS>, 1)),
									mk_If(mk_RelExpr(42, <EQUALS>, i), 
										  [ mk_Assign(i, 10) ],
										  [ mk_Assign(b, false) ])
								]);*/
    -- PROG3:
	-- program
	--  int i, j;
	--  bool b;
	--  j := 0;
	--  i := j + 1;
	--  if 42 = i then i := 10 else b := false end
	--  end
	--  j = 0, i = 1, b = false

	-- program
	--	int i, j;
	-- 	i := 20; inputs
	--  j := 12;
	--  if (i = 0) then
	--		i := j
	--	else
	--		while (j != 0) do
	--			if (i > j) then
	--				i := i - j
	--			else
	--				j := j - i
	--			fi
	--		do 
	--  fi
	/*PUZZLE: Program = mk_Program({ i |-> <IntTp>, j |-> <IntTp> },
								[
									mk_Assign(i, 20),
									mk_Assign(j, 12),
									mk_If(mk_RelExpr(i, <EQUALS>, 0),
										[mk_Assign(i, j)],
										[mk_While(
											mk_RelExpr(j, <NOTEQUALS>, 0), 
											[mk_If(mk_RelExpr(i, <GT>, j),
												   [mk_Assign(i, mk_ArithExpr(i, <MINUS>, j))],
												   [mk_Assign(j, mk_ArithExpr(j, <MINUS>, i))]) 
											])
										])
								]);*/


functions 

----------------------------------------------------------------------------
---------------------------- CONTEXT CONDITIONS ----------------------------
----------------------------------------------------------------------------

-- could actually all be +> for total functions...
wf_Program: Program -> bool
wf_Program(mk_Program(vars, body)) == 
	wf_StmtList(body, vars);

wf_StmtList: Stmts * TypeMap -> bool
wf_StmtList(sl, tpm) == 
	forall s_i in set inds sl & wf_Stmt(sl(s_i), tpm);

wf_Stmt: Stmt * TypeMap -> bool
wf_Stmt(s, tpm) ==
	cases true:
		(is_Assign(s))	-> wf_Assign(s, tpm),
		(is_If(s)) 		-> wf_If(s, tpm),
		(is_While(s))	-> wf_While(s, tpm),
		others		 	-> false
	end;

--Changed this function (Student)
wf_Assign: Assign * TypeMap -> bool
wf_Assign(mk_Assign(lhs, rhs), tpm) ==
	if len lhs <> 1
	then(
		hd lhs in set dom tpm and
		c_tp(hd rhs, tpm) = tpm(hd lhs) and
		wf_Assign(mk_Assign(tl lhs, tl rhs), tpm)
	)
	else
	(
		lhs(1) in set dom tpm and 
		c_tp(rhs(1), tpm) = tpm(lhs(1))
	);
	

wf_If: If * TypeMap -> bool
wf_If(mk_If(test, th, el), tpm) ==
	c_tp(test, tpm) = <BoolTp> and
	wf_StmtList(th, tpm) and
	wf_StmtList(el, tpm);

wf_While: While * TypeMap -> bool
wf_While(mk_While(test, body), tpm) ==
	c_tp(test, tpm) = <BoolTp> and
	wf_StmtList(body, tpm);

c_tp: Expr * TypeMap -> (ScalarType | <Error>)
c_tp(e, tpm) ==
	cases true:
		(is_ArithExpr(e))	-> c_tp_AExpr(e, tpm),
		(is_RelExpr(e)) 	-> c_tp_RExpr(e, tpm),
		(is_Id(e))			-> c_tp_Id(e, tpm),
		(is_ScalarValue(e)) -> c_tp_ScalarValue(e),
		(is_TextExpr(e))    -> c_tp_TextExpr(e, tpm),    --added line (student).
		others				-> <Error>
	end;


--added c_tp_TextExpr (student)
c_tp_TextExpr: TextExpr * TypeMap -> (ScalarType | <Error>)
c_tp_TextExpr(mk_TextExpr(op1, -, op2), tpm) == 
	if (c_tp(op1, tpm) = <StrTp> and c_tp(op2, tpm) = <StrTp>)
	then <StrTp>
	else <Error>;

 
c_tp_AExpr: ArithExpr * TypeMap -> (ScalarType | <Error>)
c_tp_AExpr(mk_ArithExpr(op1, -, op2), tpm) ==
	if (c_tp(op1, tpm) = <IntTp> and c_tp(op2, tpm) = <IntTp>)
	then <IntTp>
	else <Error>;

c_tp_RExpr: RelExpr * TypeMap -> (ScalarType | <Error>)
c_tp_RExpr(mk_RelExpr(op1, -, op2), tpm) ==
	if (c_tp(op1, tpm) = <IntTp> and c_tp(op2, tpm) = <IntTp>)
	then <BoolTp>
	else if (c_tp(op1, tpm) = <StrTp> and c_tp(op2, tpm) = <StrTp>) --added else if so could use <IN> (student)
	then <BoolTp>
	else <Error>;

c_tp_Id: Id * TypeMap -> (ScalarType | <Error>)
c_tp_Id(id, tpm) ==
	if (id in set dom tpm)
	then tpm(id)
	else <Error>;

c_tp_ScalarValue: ScalarValue -> (ScalarType | <Error>)
c_tp_ScalarValue(v) ==
	cases true:
		(is_int(v))		-> <IntTp>,
		(is_bool(v)) 	-> <BoolTp>,
		(is_string(v))  -> <StrTp>,  -- added line (student)
		others			-> <Error>
	end;

----- Extensions ----

wf_Block: Block * TypeMap -> bool
wf_Block(mk_Block(btpm, body), tpm) == wf_StmtList(body, tpm ++ btpm);

------------------------------------------------------------------------
---------------------------- SEMANTIC RULES ----------------------------
------------------------------------------------------------------------

exec_program: Program -> ValueMap
exec_program(mk_Program(vars, body)) ==
	let sigma_zero = initial_Sigma(vars) in 
		let sigma_dash = exec_sl(body, sigma_zero) in
			sigma_dash;
		
exec_sl_empty: Stmts * ValueMap -> ValueMap
exec_sl_empty([], sigma) == sigma;

exec_sl_concat: Stmts * ValueMap -> ValueMap
exec_sl_concat([s] ^ rest, sigma) == 
	let sigma_dash = exec_stmt(s, sigma) in
		let sigma_double_dash = exec_sl(rest, sigma_dash) in
			sigma_double_dash;

exec_sl: Stmts * ValueMap -> ValueMap
exec_sl(sl, sigma) ==
	cases sl:
		[]			-> exec_sl_empty([], sigma),
		[s] ^ rest	-> exec_sl_concat([s] ^ rest, sigma)
	end;

exec_stmt: Stmt * ValueMap -> ValueMap
exec_stmt(s, sigma) ==
	/*
	cases s:
		mk_Assign(lhs, rhs) -> exec_Assign(s, sigma),
		mk_If(test, th, el) -> exec_If(s, sigma)
	end;
	*/
	cases true:
		(is_Assign(s)) 	-> exec_Assign(s, sigma),
		(is_If(s))	 	-> exec_If(s, sigma),
		(is_While(s))	-> exec_While(s, sigma)
	end;

exec_Assign: Assign * ValueMap -> ValueMap
exec_Assign(mk_Assign(lhs, rhs), sigma) ==
	let v= eval_expr(hd rhs, sigma) in
	if len lhs <> 1
	then(
		exec_Assign(mk_Assign(tl lhs, tl rhs), sigma)
	)
	else 
		sigma ++ { hd lhs |-> v };

exec_If: If * ValueMap -> ValueMap
exec_If(mk_If(test, th, el), sigma) ==
	let passed = eval_expr(test, sigma) in 
		if passed then 
			exec_sl(th, sigma)	
		else
			exec_sl(el, sigma);
	-- same as 
	-- if sem_expr(test, sigma) then sem_sl(th, sigma) else sem_sl(el, sigma);
	-- if passed then (let sigma_dash = sem_sl(th, sigma) in sigma_dash) else ....	

exec_While: While * ValueMap -> ValueMap
exec_While(mk_While(test, body), sigma) ==
	let passed = eval_expr(test, sigma) in
		if passed then
			let sigma_dash = exec_sl(body, sigma) in
				let sigma_double_dash = exec_While(mk_While(test, body), sigma_dash) in
					sigma_double_dash
			-- same as sem_While(mk_While(test, body), sem_sl(body, sigma))
		else
			sigma
--measure
--	measure_Sem_While
;

-- inner while calls must have smaller body?
-- measure_Sem_While: While * ValueMap -> nat
-- measure_Sem_While(mk_While(-, body), -) == ... use some global counter;

eval_expr: Expr * ValueMap -> ScalarValue
eval_expr(e, sigma) ==
	cases true:
		(is_ArithExpr(e))	-> eval_AExpr(e, sigma),
		(is_RelExpr(e))		-> eval_RExpr(e, sigma),
		(is_TextExpr(e))    -> eval_Texpr(e, sigma), -- Added line (student)
		(is_Id(e))			-> lookup_Id(e, sigma),
		(is_ScalarValue(e)) -> e,
		others				-> false
	end; 

eval_AExpr: ArithExpr * ValueMap -> int
eval_AExpr(mk_ArithExpr(op1, opt, op2), sigma) ==
	let v1 = eval_expr(op1, sigma) in
		let v2 = eval_expr(op2, sigma) in
			cases opt:
				<PLUS>	-> (v1 + v2),
				<MINUS> -> (v1 - v2)
			end
--pre
--	is_int(eval_expr(op1, sigma)) and
--	is_int(eval_expr(op2, sigma))
;

eval_RExpr: RelExpr * ValueMap -> bool
eval_RExpr(mk_RelExpr(op1, opt, op2), sigma) ==
	let v1 = eval_expr(op1, sigma) in
		let v2 = eval_expr(op2, sigma) in
			cases opt:
				<EQUALS>	->     (v1 = v2),
				<NOTEQUALS> -> not (v1 = v2),
				<IN>        ->   (isinstring(v1, v2)),
				<GT>		-> v1 > v2
			end
--pre
	-- relax this if <AND>, <OR>, etc is included
--	is_int(eval_expr(op1, sigma)) and
--	is_int(eval_expr(op2, sigma))
;


eval_Texpr: TextExpr * ValueMap -> string
eval_Texpr(mk_TextExpr(op1, opt, op2), sigma) ==
	let v1 = eval_expr(op1, sigma) in
		let v2 = eval_expr(op2, sigma) in
			cases opt:
				<ADD>    ->   (v1 ^ v2)
			end

;

--Added this function (student)
isinstring: string * string -> bool
isinstring(str1, str2) ==
	let setstr1: set of char = elems str1,
		setstr2: set of char = elems str2
	in
	setstr2 subset setstr1
pre card elems str2 <= card elems str1;


lookup_Id: Id * ValueMap -> ScalarValue
lookup_Id(id, sigma) ==
	sigma(id)
pre
	id in set dom sigma;

/* Initial sigma is given by default values to each scalar type*/
initial_Sigma: TypeMap -> ValueMap
initial_Sigma(tpm) ==
	{ id |-> 0 | id in set dom tpm & tpm(id) = <IntTp> }
	munion  -- or ++ for update ....
	{ id |-> true | id in set dom tpm & tpm(id) = <BoolTp> }
	munion
	{id |-> "" | id in set dom tpm & tpm(id) = <StrTp>}; -- added line (student)


---------------------------- Extensions

exec_block: Block * ValueMap -> ValueMap
exec_block(mk_Block(tpm, body), sigma) ==
	let sigma_zero = initial_Sigma(tpm) in
		let sigma_i = sigma ++ sigma_zero in
			let sigma_i_dash = exec_sl(body, sigma_i) in
				sigma ++ { id |-> sigma_i_dash(id) | id in set dom sigma &  id not in set dom tpm }; 

exec_block2: Block * ValueMap -> ValueMap
exec_block2(mk_Block(tpm, body), sigma) ==
	let sigma_zero = initial_Sigma(tpm) in
		let sigma_i = sigma ++ sigma_zero in
			let sigma_i_dash = exec_sl(body, sigma_i) in
				let sigma_dash = ((dom sigma \ dom tpm) <: sigma_i_dash) 
								 munion 
								 (dom tpm <: sigma) in
					sigma_dash;
-- warning: is munion defined above?

-------------------------------------------------------------------
---------------------------- STATE? -------------------------------
-------------------------------------------------------------------


/* Sigma ought to be consistent at all types wrt type map of the program*/
SigmaInv: ValueMap * TypeMap -> bool
SigmaInv(vlm, tpm) == 
	(forall id in set dom vlm & 
		id in set dom tpm 
		and 
		c_tp_ScalarValue(vlm(id)) = tpm(id)); 

state BaseState of
	prog : Program
	sigma: ValueMap
inv mk_BaseState(prog, sigma) == 
		wf_Program(prog)
		and
		SigmaInv(sigma, prog.vars)
init bst == bst = mk_BaseState(mk_Program({|->}, []), {|->})
end 

-- Alternative way of interpreting programs as a state-based model
operations 

sem_prog: Program ==> ()
sem_prog(mk_Program(vars, body)) ==
	(dcl sigma_zero: ValueMap;
		sigma_zero := initial_Sigma(vars);
		atomic(
			sigma := exec_sl(body, sigma_zero);
			prog := mk_Program(vars, body);
		);
	);

/* could define semantic functions in terms of implicit sigma side-effects... give it explicitly 
sem_sl: Stmts * ValueMap ==> ValueMap
*/

TestWF : Program ==> ()
TestWF(p) ==
	(
		IO`println("\n\n Test well-formedness functions\n");
		IO`println  ("------------ STARTED  ------------");
			(dcl 
				resultP3 : bool := wf_Program(p);
				IO`println(p);
				IO`println("\t ");
				IO`println(resultP3);
			);
		IO`println  ("\n----------------------------------\n");

			(dcl 
				resultPUZZLE : bool := wf_Program(PUZZLE);
				IO`println(PUZZLE);
				IO`println("\t ");
				IO`println(resultPUZZLE);
			);

	
		IO`println("\n------------ FINISHED ------------\n");
	);

TestExec : Program ==> ()
TestExec(p) ==
	(
		IO`println("\n\n Test semantic execution functions\n");
		IO`println  ("------------ STARTED  ------------");
			(dcl 
				resultP3 : ValueMap := exec_program(p);
				IO`println(p);
				IO`println("\t ");
				IO`println(resultP3);
			);
		IO`println  ("\n----------------------------------\n");

			(dcl 
				resultPUZZLE : ValueMap := exec_program(PUZZLE);
				IO`println(PUZZLE);
				IO`println("\t ");
				IO`println(resultPUZZLE);
			);

	
		IO`println("\n------------ FINISHED ------------\n");
	);

end Base