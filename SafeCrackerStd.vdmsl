module SafeCrackerStd
imports from IO		 operations  print	renamed print;
exports all
definitions 

--@doc R1 represent the safe cracker generally (e.g. N wheels and M spokes) 
--@doc R1.1 instantiate the safe cracker to specific configuration 
--@doc R1.2 instantiate the wheels (4) and spokes (16) 

--@doc R2 find the safe combination/configuration to open the safe
--@doc R3 ensure that at least one combination exists
--@doc R4 capture the safe properties in your design
--@doc R5 ensure that the safe development is satisfiable

--@doc suggested configuration with certain openning combination
--	   this also suggests a fixed notion of spokes (i.e. where is 1st spoke)?
--	   OUTER = 27, 11, 20, 27,  3,  2,  3, 19, 23,  2, 10, 15, 13, 10, 19, 10
--	   MID2  =  5,  9, 10,  2,  6,  1, 27, 10, 10,  6,  6,  9,  3,  3,  8,  3
--	   MID1  = 10, 17,  5, 19,  4,  3, 15, 13, 17, 10,  2, 20, 15,  6,  2, 10
--     INNER = 10,  1, 10, 12, 10, 10,  3, 17,  3, 10, 13,  1,  6,  8, 10, 24
--
--	   certain wheels have overlays over intermitent spokes
--	   again this requires a notion of spoke positioning 
--	   MID1_OVERLAY  = 10,  2, 12, 17, 16, 9, 9, 15
--	   MID2_OVERLAY  =  1, 22,  6, 24, 24, 7, 5, 27
--     INNER_OVERLAY =  5,  4,  6,  6, 10, 1, 6,  4	
--
--	   secret sum is 40, yet also a game parameter

values
	MAX_WHEELS: nat1 = 4;
	MAX_SPOKES: nat1 = 16;
	SECRET_SUM: nat1 = 40;
	
types

	Value = nat1
	inv v == v <= SECRET_SUM - MAX_WHEELS + 1;

	Collumnsum = nat1
	inv c == c <= SECRET_SUM;

	OverValue = nat1 | <Empty>
	inv v == v = <Empty> or v <= SECRET_SUM - MAX_WHEELS + 1;

	Rotate = nat
	inv r == r <= MAX_SPOKES and r >= 0;
	
	Spokes = nat1 
	inv s == s <= MAX_SPOKES;
	
	Wheel = seq of Value
	inv w == len w = MAX_SPOKES or len w = 1 or len w = 15; -- length of wheel must be equal to max spokes for the integrity of the game or 1 for turning.

	combwheel = seq of Value
	inv cw == len cw = MAX_SPOKES;

	Overwheel = seq of OverValue
	inv ow == len ow = MAX_SPOKES or len ow = 1 or len ow = 15; -- length of overlay wheel of non empty values is equal to MAX_SPOKES, half of them are filled out as <Empty>, or equal to 1 for turning fucntion.

	Wheels = seq of Wheel
	inv ws == len ws <= MAX_WHEELS; -- ammount of wheels must be equal or less to the MAX_WHEELS
	
	--@todo depending on design decisions you may need a notion of Overlay?
	Overlay = seq of Overwheel
	inv ovl == len ovl < MAX_WHEELS;
	
	Safe = Overlay * Wheels
	inv mk_(o, w) == len o = len w-1;

	--@todo a safe is not a combination; but a combination is part of a safe? 
	--in my case combinationn is 4 sequences of wheels that we would see if we saw the safe cracker puzzle from top-down. (wheels and overhweels combined).
	Combination = seq of combwheel
	inv c == len c = MAX_WHEELS;

	Rotations =  seq of Rotate
	inv r == len r = MAX_WHEELS-1; -- last two connected wheels do not rotate since their rotation would not change the result.

values
	--GOOD_SAFE.#1(1) = 				[10, <Empty>, 2, <Empty>, 12, <Empty>, 17, <Empty>, 16, <Empty>, 9, <Empty>, 9, <Empty>, 15, <Empty>],

	GOOD_SAFE: Safe = mk_(
			[
				--INNER_OVERLAy
				[10, <Empty>, 2, <Empty>, 12, <Empty>, 17, <Empty>, 16, <Empty>, 9, <Empty>, 9, <Empty>, 15, <Empty>],
				--MID1_OVERLAY
				[1, <Empty>, 22, <Empty>, 6, <Empty>, 24, <Empty>, 24, <Empty>, 7, <Empty>, 5, <Empty>, 27,<Empty>],
				--MID2_OVERLAY
				[5, <Empty>, 4, <Empty>, 6, <Empty>, 6, <Empty>, 10, <Empty>, 1, <Empty>, 6, <Empty>, 4, <Empty>]
			],
			[
				--INNER
				[10,  1, 10, 12, 10, 10,  3, 17,  3, 10, 13,  1,  6,  8, 10, 24],
				--MID1
				[10, 17,  5, 19,  4,  3, 15, 13, 17, 10,  2, 20, 15,  6,  2, 10],
				--MID2
				[5,  9, 10,  2,  6,  1, 27, 10, 10,  6,  6,  9,  3,  3,  8,  3],
				--OUTER
				[27, 11, 20, 27,  3,  2,  3, 19, 23,  2, 10, 15, 13, 10, 19, 10]
			]
		);
		CHECKING_SAFE: Safe = mk_( -- GOOD_SAFE solution, used for looking where algorithm fails
					[
						[2, <Empty>, 12, <Empty>, 17, <Empty>, 16, <Empty>, 9, <Empty>, 9, <Empty>, 15, <Empty>, 10, <Empty>], --[3]
						[<Empty>, 7, <Empty>, 5, <Empty>, 27, <Empty>, 1, <Empty>, 22, <Empty>, 6, <Empty>, 24, <Empty>, 24], --[10]
						[6, <Empty>, 4, <Empty>, 5, <Empty>, 4, <Empty>, 6, <Empty>, 6, <Empty>, 10, <Empty>, 1, <Empty>] -- [13]
					],
					[
						[10, 13, 1, 6, 8, 10, 24, 10, 1, 10, 12, 10, 10, 3, 17, 3], -- [10]
						[5, 19, 4, 3, 15, 13, 17, 10, 2, 20, 15, 6, 2, 10, 10, 17],
						[5, 9, 10, 2, 6, 1, 27, 10, 10, 6, 6, 9, 3, 3, 8, 3],
						[27, 11, 20, 27, 3, 2, 3, 19, 23, 2, 10, 15, 13, 10, 19, 10]
					]
	);

	TESTING_SAFE: Safe = mk_( -- should return [1,1,1]
			[
				[10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>],
				[10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>],
				[10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>, 10, <Empty>]
			],
			[
				[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
				[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
				[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
				[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
			]
	);

		--Starting combination is equal to the default 4 wheels of safe. Just for the clarity. Not actual values
		--Only OUTER and MID2 wheel is correct because it is not touched in my functions.
		--OUTER and MID2 wheel are connected and would not change the result by turning.
		STARTING_COMBINATION: Combination =(
			[
				--INNER
				[10,  1, 10, 12, 10, 10,  3, 17,  3, 10, 13,  1,  6,  8, 10, 24],
				--MID1
				[10, 17,  5, 19,  4,  3, 15, 13, 17, 10,  2, 20, 15,  6,  2, 10],
				--MID2
				[5,  9, 10,  2,  6,  1, 27, 10, 10,  6,  6,  9,  3,  3,  8,  3],
				--OUTER
				[27, 11, 20, 27,  3,  2,  3, 19, 23,  2, 10, 15, 13, 10, 19, 10]
			]
		);


functions


	--Following function sums up values of one collumn in a combination (Top down view of safe).
	-- c - combination, v - current value starts at 0, cn - collumn number,
	-- sn - sequence number, starts from 1
	--Values for that collumn are summed up.
	/*sum_collumn: Combination * nat * nat1 * nat1 -> nat1
	sum_collumn(c, v, cn, sn) == 
			if sn <> MAX_WHEELS
			then(
				sum_collumn(c, v+c(sn)(cn), cn, sn+1)
			)
			else
				v+c(sn)(cn)
		pre 
			-- if you have constants then why parameter?
			--v = 0 and 
			cn <= MAX_SPOKES 
			--and sn = 1 -- ask why cn condition doesnt pass.
		measure 
			MAX_WHEELS - sn; */

	sum_collumn: Combination * Spokes * nat1 -> nat1 
	sum_collumn(c, cn, sn) == 
		if sn <> MAX_WHEELS then
			c(sn)(cn) + sum_collumn(c, cn, sn+1)
		else 
			c(sn)(cn)
	pre 
		sn <= MAX_WHEELS
	measure 
		MAX_WHEELS - sn;

	sum_collumn_start: Combination * Spokes -> nat1
	sum_collumn_start(c, cn) == 
		sum_collumn(c, cn, 1);

	  /*sumelems: seq of nat -> nat
	  sumelems(s) == 
	  	if s <> [] then 
			hd s + sumelems(tl s)
		else 
			0
	measure 
		len s;*/

	--Checks if all collumn values in the current combination (top down reult of a specific rotation) equals to 40.
	--Returns True if it is.
	-- pre condition ensures that Combination uses sequences with 16 values.
	check_values: Combination -> bool
	check_values(x) == forall i in set {1,...,MAX_SPOKES} & sum_collumn_start(x, i) = SECRET_SUM
	pre forall j in set {1,...,MAX_WHEELS} & len x(j) = MAX_SPOKES;

	--Following two functions are used to turn wheel and overwheel.
	TurnOW: Overwheel -> Overwheel
	TurnOW(line) ==
	let
			number: Overwheel = [hd line],
			newline: Overwheel  = tl line
	in
		newline^number
	pre len line = MAX_SPOKES;
	
	Turn: Wheel -> Wheel
	Turn(line) ==
		let
			number: Wheel = [hd line],
			newline: Wheel  = tl line
		in
			newline^number
		pre len line = MAX_SPOKES;


	-- main function.
	InitSafe: () -> Safe
	InitSafe() == GOOD_SAFE;

--------------------------------------------------------------------------------------
--@doc you don't need the part below; 
--     it's useful for those who struggle with functions alone!
--------------------------------------------------------------------------------------

-- state State of
-- 	safe: [Safe]
-- 	sum: nat1
-- inv mk_State(-, sum) == 
-- 	--@todo document system invariants
-- 	sum <= SECRET_SUM
-- 	--and 
-- 	--(safe <> nil => valid_safe(safe))
-- init s == 
-- 	--@todo choose adequate initialisation: nil will fail invariant. 
-- 	s = mk_State(nil, SECRET_SUM)  
-- end

/*state S of 
	x: nat 
init s == s = mk_S(0)
end */

operations


--Turns provided safe into a combination (a sequence of sequences equal to ammount of max wheels).
--Combination is how the safe cracker would look from top down (only visible values).
SafeToCombinationOperation(s: Safe) r: Combination ==
	(
		dcl comb: Combination := STARTING_COMBINATION;

		for i = 1 to MAX_WHEELS-1 by 1 do(
				for j = 1 to MAX_SPOKES by 1 do(
						if s.#1(i)(j) <> <Empty> 
						then( 
							comb(i)(j) := s.#1(i)(j);
						)
						else
							comb(i)(j) := s.#2(i)(j);
				);
		);
		comb(MAX_WHEELS) := s.#2(MAX_WHEELS);
		return comb;
	)
	pre len s.#1 = MAX_WHEELS-1 
		and len s.#2 = MAX_WHEELS
		and forall x in set {1,...,MAX_WHEELS-1} & len s.#1(x) = MAX_SPOKES
		and forall z in set {1,...,MAX_WHEELS} & len s.#2(z) = MAX_SPOKES;


-- checks through all possible combinations for that one move. To be used in CheckAndReturn Operation.
CheckThroughFollowing(s: Safe, n: nat1, rot: Rotations) r: Rotations == 
	(
		dcl placementow: Overlay := s.#1;
		dcl placementws: Wheels := s.#2;
		dcl placementrotations: Rotations := rot;

		for i = n+1 to MAX_WHEELS-2 by 1 do
		(
			for j = 1 to MAX_SPOKES-1 by 1 do
			(
				-- if finds, returns rotations and loop breaks.
				if(check_values(SafeToCombinationOperation(mk_(placementow, placementws)))) = true
					then(
						return placementrotations;
						)
					else -- if viable rotation is not found, turns upper duo (wheel and overwheel) again once
						(
							if i <= MAX_WHEELS-3
							then(
								 if CheckThroughFollowing(mk_(placementow, placementws), i, placementrotations) <> placementrotations
								 	then (
										return placementrotations;
									)
							)else
							(
							placementow(i) := TurnOW(placementow(i));
							placementws(i-1) := Turn(placementws(i-1));
							placementrotations(i) := j+1;
							)
						)
			);
		);
		return rot; -- returns unchanged roation if earlier loop does not return a changed (placement) rotation.
	)
	pre len s.#1 = MAX_WHEELS-1 -- not sure if needed, safe invariant already covers this
		and len s.#2 = MAX_WHEELS -- not sure if needed, safe invariant already covers this
		and forall x in set {1,...,MAX_WHEELS-1} & len s.#1(x) = MAX_SPOKES
		and forall z in set {1,...,MAX_WHEELS} & len s.#2(z) = MAX_SPOKES
		and n <= MAX_WHEELS-2
		and forall l in set {1,...,MAX_WHEELS-1} & rot(l) <= 16;
		

CheckAndReturn(s: Safe, rot: Rotations) r: Rotations ==
	(
		dcl placementow: Overlay := s.#1;
		dcl placementws: Wheels := s.#2;
		dcl placementrotations: Rotations := rot;

		for i = 1 to MAX_WHEELS-1 by 1 do
		(
			for j = 1 to MAX_SPOKES-1 by 1 do(
				if i = 1 --if beggining (begins from center overwheel so only overwheel is turned)
					then(
						if(check_values(SafeToCombinationOperation(mk_(placementow, placementws)))) = true -- if initial value is solution, returns rotation and loop breaks.
						then(
							return placementrotations;
							)
						else(
							placementow(i) := TurnOW(placementow(i)); -- placement overlay is updated
							placementrotations(i) := j+1;
							if CheckThroughFollowing(mk_(placementow, placementws), i, placementrotations) <> placementrotations
								then(
									placementrotations := CheckThroughFollowing(mk_(placementow, placementws), i, placementrotations);
									return placementrotations;
								)
						)
					)
				else -- if not first wheel (not a single overwheel turned but both)
					(
						if(check_values(SafeToCombinationOperation(mk_(placementow, placementws)))) = true --checks starting value
						then
						(
							return placementrotations; -- returns if good unturned
						)
						else -- turns both wheel and overwheel
						(
							--placementsafe := TurnSafeOperation(placementsafe, i);
							placementow(i) := TurnOW(placementow(i));
							placementws(i-1) := Turn(placementws(i-1));
							placementrotations(i) := j+1;
							--checks through following possible combinations
							if i <> MAX_WHEELS-1 -- if not last wheel, then checks through possible combinations.
							then(
								if CheckThroughFollowing(mk_(placementow, placementws), i, placementrotations) <> placementrotations
									then(
										placementrotations := CheckThroughFollowing(mk_(placementow, placementws), i, placementrotations);
										return placementrotations;
									)
							)
							else -- if last wheel and overwheel duo, only turns the last duo ()
								(
									placementow(i) := TurnOW(placementow(i));
									placementws(i-1) := Turn(placementws(i-1));
									placementrotations(i) := j+1;
								)
						)
					)
			);
		);
		return [0,0,0]; -- Returns zeroes if no good combination was found. (No solution found)
	)
	pre len s.#1 = MAX_WHEELS-1 -- not sure if needed, safe invariant already covers this
		and len s.#2 = MAX_WHEELS -- not sure if needed, safe invariant already covers this
		and forall x in set {1,...,MAX_WHEELS-1} & len s.#1(x) = MAX_SPOKES
		and forall z in set {1,...,MAX_WHEELS} & len s.#2(z) = MAX_SPOKES
		and rot = [1,1,1];

	Check() r: Rotations ==
	(
		return CheckAndReturn(GOOD_SAFE, [1,1,1]);
	);

	Try() r: bool == -- used for testing out operations
	(
		check_values(SafeToCombinationOperation(TESTING_SAFE));
	);

	Solutioning() ==
	(
		dcl rot: Rotations := CheckAndReturn(GOOD_SAFE, [1,1,1]);

		if rot <> [0,0,0]
		then(
			print("Found a solution rotation: " ^ rot);
		)
		else
			print("No possible solutions for this safe were found by current implementation");
	);


-- --@doc resets safe to initial positon
-- resetSafe() == 
-- 	(safe := nil)
-- ext wr safe
-- post safe = GOOD_SAFE;
	
-- --@doc configures the safe to a specific initial value
-- configureSafe(s: Safe) == 
-- 	--@todo
-- 	is not yet specified
-- ext wr safe
-- pre
-- 	--@todo
-- 	true 
-- post 
-- 	safe = s;

-- openSafe() c: Combination ==
-- 	--@todo 
-- 	is not yet specified
-- ext rd safe
-- pre
-- 	--@todo
-- 	true
-- post
-- 	--@todo
-- 	true;

-- revealValues(c: Combination) r: ? ==
-- 	is not yet specified
-- ext rd safe;
	
-- --@todo
-- traces


end SafeCrackerStd